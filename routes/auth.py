from flask import Blueprint, request, session, redirect, url_for, render_template, flash
from werkzeug.security import check_password_hash, generate_password_hash
from models.db_database import db, User, Order
from services.strava_service import StravaService, decrement_strava_connections

auth_bp = Blueprint("auth", __name__)

@auth_bp.route("/login", methods=["GET", "POST"])
def login():
    # NOTE: Nous FOR√áONS la r√©autorisation Strava √† chaque login en nettoyant
    # les tokens Strava c√¥t√© user si pr√©sents. L'utilisateur devra reconnecter via /connect.
    if request.method == "POST":
        email = request.form.get("email")
        password = request.form.get("password")

        user = User.query.filter_by(email=email).first()
        if not user or not check_password_hash(user.password, password):
            flash("Identifiants incorrects.", "error")
            return redirect(url_for("auth.login"))

        session["user_id"] = user.id
        flash("Connexion r√©ussie ‚úÖ ‚Äî vous devrez reconnecter Strava si vous souhaitez importer des activit√©s.", "success")
        print(f"üë§ Utilisateur {user.email} connect√© (id={user.id})")

        # --- FORCER de-reconnect Strava pour √©viter reconnexions automatiques "fant√¥mes"
        # On v√©rifie s'il y a des tokens stock√©s c√¥t√© user (access/refresh) : si oui, on les supprime proprement.
        try:
            if user.strava_access_token or user.strava_refresh_token:
                print(f"üîí Nettoyage tokens Strava existants pour user {user.id} (oblig√© pour forcer r√©auth).")
                # R√©voque c√¥t√© Strava et nettoie en base
                StravaService.disconnect_user(user)
                # D√©cr√©mente le compteur global si on supprimait r√©ellement quelque chose
                decrement_strava_connections()
                StravaService.recalculate_connected_count()
                print(f"‚úÖ Tokens Strava supprim√©s et compteur d√©cr√©ment√© pour user {user.id}")
        except Exception as e:
            # Ne doit pas emp√™cher la connexion si quelque chose casse c√¥t√© API Strava
            print(f"‚ö†Ô∏è Erreur en nettoyant tokens Strava pour user {user.id}: {e}")

        # IMPORTANT : on ne tente PAS d'auto-refresh Strava ici ‚Äî l'utilisateur doit repasser par le flow OAuth.
        return redirect(url_for("auth.compte"))

    return render_template("login.html")

@auth_bp.route("/register", methods=["GET", "POST"])
def register():
    message, message_type = None, None

    if request.method == "POST":
        first_name = request.form["first_name"]
        last_name = request.form["last_name"]
        email = request.form["email"]
        password = request.form["password"]

        existing_user = User.query.filter_by(email=email).first()

        if existing_user:
            if existing_user.password is None:
                # ‚ö° Cas 1 : transformation d‚Äôun compte guest en vrai compte
                existing_user.first_name = first_name
                existing_user.last_name = last_name
                existing_user.password = generate_password_hash(password, method='pbkdf2:sha256')
                db.session.commit()

                # üß© Si le guest avait une session Strava active, on la supprime proprement
                StravaService.migrate_guest_to_user(existing_user)

                message = "Votre compte a √©t√© activ√© avec succ√®s. Vous pouvez maintenant vous connecter."
                message_type = "success"
            else:
                # Un compte normal existe d√©j√† avec cet email
                message = "Un compte existe d√©j√† avec cet email."
                message_type = "error"

        else:
            # ‚öôÔ∏è Cas 2 : cr√©ation d‚Äôun nouvel utilisateur normal
            hashed_password = generate_password_hash(password, method='pbkdf2:sha256')
            new_user = User(
                first_name=first_name,
                last_name=last_name,
                email=email,
                password=hashed_password
            )
            db.session.add(new_user)
            db.session.commit()

            # üß© Si un guest Strava est actif dans la session, on le supprime ici aussi
            StravaService.migrate_guest_to_user(new_user)

            message = "Compte cr√©√© avec succ√®s, vous pouvez vous connecter."
            message_type = "success"

    return render_template("register.html", message=message, message_type=message_type)

@auth_bp.route("/logout")
def logout():
    """
    D√©connecte l‚Äôutilisateur du site ET de Strava proprement :
    - R√©voque le token Strava (user ou guest)
    - Nettoie la session
    - Met √† jour le compteur global
    """
    from services.strava_service import StravaService

    if "user_id" in session:
        user = User.query.get(session["user_id"])
        if user:
            print(f"üîí D√©connexion utilisateur {user.email} (id={user.id})...")

            # R√©voque proprement le token Strava s‚Äôil existe
            if user.strava_access_token:
                StravaService.disconnect_user(user)
                print(f"‚úÖ Strava d√©connect√© pour user {user.id}")
            else:
                print(f"‚ö†Ô∏è Aucun token Strava actif pour user {user.id}")

        # Nettoyage session utilisateur Flask
        session.pop("user_id", None)
        session.pop("selected_activity", None)
        session["strava_just_disconnected"] = True

    else:
        # Cas GUEST
        print("üîí D√©connexion d‚Äôun invit√© (guest)...")
        StravaService.disconnect_session_principal()

    # üîÑ Recalcule le compteur global
    StravaService.recalculate_connected_count()

    flash("D√©connexion r√©ussie ‚úÖ (Strava d√©connect√© et session effac√©e)", "success")
    print("üëã Utilisateur d√©connect√© avec succ√®s ‚Äî session nettoy√©e.")
    return redirect(url_for("auth.login"))


@auth_bp.route("/compte")
def compte():
    if "user_id" not in session:
        return redirect(url_for("auth.login"))

    user = User.query.get(session["user_id"])
    if not user:
        return redirect(url_for("auth.login"))
    # R√©cup√©rer toutes les commandes de l'utilisateur
    orders = Order.query.filter_by(user_id=user.id).order_by(Order.created_at.desc()).all()

    return render_template("compte.html", user=user, orders=orders)
